basePath: /
definitions:
  api.TitleObj:
    properties:
      name:
        type: string
      status:
        type: integer
    type: object
  dataaccess.CartItemObj:
    properties:
      CartId:
        type: integer
      Description:
        type: string
      Name:
        type: string
      Quantity:
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.ClientRequest:
    properties:
      Description:
        type: string
      Name:
        type: string
    type: object
  dataaccess.ClientResp:
    properties:
      Id:
        type: integer
      Name:
        type: string
      respToken:
        type: string
    type: object
  dataaccess.RemoveCartItemObj:
    properties:
      CartId:
        type: integer
      CartItemId:
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.ResponseMessage:
    properties:
      responseCode:
        type: string
      responseMessage:
        type: string
    type: object
  dataaccess.RmoveUserFromGroupObj:
    properties:
      AdminId:
        type: integer
      CartId:
        type: integer
      GroupName:
        type: string
      GroupTypeId:
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.TblCart:
    properties:
      Id:
        type: integer
      cartName:
        type: string
      cartTypeId:
        type: integer
      createdAt:
        type: string
      createdById:
        type: integer
      description:
        type: string
      groupId:
        type: integer
      lastUpdatedBy:
        type: integer
      status:
        type: string
      userId:
        type: integer
    type: object
  dataaccess.TblCartItem:
    properties:
      CartId:
        type: integer
      DateAdded:
        type: string
      Description:
        type: string
      Name:
        type: string
      ProductId:
        type: integer
      Quantity:
        type: integer
      UserId:
        type: integer
      id:
        type: integer
    type: object
  dataaccess.TblGroupObj:
    properties:
      CartId:
        type: integer
      Description:
        type: string
      GroupName:
        type: string
      GroupTypeId:
        description: RoleId      int    `json:"RoleId"`
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.TblGroupUser:
    properties:
      CartId:
        type: integer
      DateAdded:
        type: string
      Description:
        type: string
      GroupName:
        type: string
      GroupTypeId:
        type: integer
      Id:
        type: integer
      RoleId:
        type: integer
      Status:
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.TblStatus:
    properties:
      CreatedAt:
        type: string
      Id:
        type: integer
      StatusName:
        type: string
    type: object
  dataaccess.TblTeamGroupObj:
    properties:
      AdminId:
        type: integer
      CartId:
        type: integer
      Description:
        type: string
      GroupName:
        type: string
      GroupTypeId:
        type: integer
      UserId:
        type: integer
    type: object
  dataaccess.TitleResp:
    properties:
      CreatedAt:
        type: string
      Id:
        type: integer
      Name:
        type: string
      Status:
        type: boolean
    type: object
  dataaccess.User:
    properties:
      ageRange:
        type: string
      createdAt:
        type: string
      emailAddress:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: integer
      lastName:
        type: string
      location:
        type: string
      mobileNumber:
        type: string
      nickName:
        type: string
      password:
        type: string
      status:
        type: string
      titleId:
        type: string
      userName:
        type: string
    type: object
  obj.CartObj:
    properties:
      cartName:
        type: string
      cartTypeId:
        type: integer
      createdById:
        type: integer
      description:
        type: string
      groupId:
        type: integer
      status:
        type: string
      userId:
        type: integer
    type: object
  obj.CartUserObj:
    properties:
      cartId:
        type: integer
      memberEmail:
        type: string
      ringMasterEmail:
        type: string
      ringStatus:
        type: integer
    type: object
  obj.CloseCartObj:
    properties:
      cartId:
        type: integer
      reason:
        type: string
      ringMasterEmail:
        type: string
    type: object
  obj.CompleteSignUp:
    properties:
      ageRange:
        type: string
      emailAddress:
        type: string
      firstName:
        type: string
      gender:
        type: string
      lastName:
        type: string
      mobileNumber:
        type: string
      nickName:
        type: string
      titleId:
        type: integer
      userName:
        type: string
    type: object
  obj.EmailObj:
    properties:
      mailBody:
        type: string
      subject:
        type: string
      toEmail:
        type: string
    type: object
  obj.RemoveUserFromCartObj:
    properties:
      cartId:
        type: integer
      memberEmail:
        type: string
      ringMasterEmail:
        type: string
    type: object
  obj.ResponseMessage:
    properties:
      responseCode:
        type: string
      responseMessage:
        type: string
    type: object
  obj.SignUp:
    properties:
      Email:
        type: string
      MobileNumber:
        minLength: 8
        type: string
      Password:
        minLength: 8
        type: string
    required:
    - Email
    - MobileNumber
    - Password
    type: object
  obj.TokenResp:
    properties:
      token:
        type: string
    type: object
  obj.UserObj:
    properties:
      AgeRange:
        type: string
      FirstName:
        type: string
      Gender:
        type: string
      LastName:
        type: string
      Location:
        type: string
      MobileNumber:
        minLength: 8
        type: string
      NickName:
        type: string
      Password:
        minLength: 8
        type: string
      Status:
        minLength: 1
        type: string
      TitleId:
        type: string
      UserName:
        minLength: 4
        type: string
      email:
        type: string
    required:
    - MobileNumber
    - Password
    - Status
    - UserName
    - email
    type: object
  obj.UserResponse:
    properties:
      ageRange:
        type: string
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: integer
      lastName:
        type: string
      location:
        type: string
      mobileNumber:
        type: string
      nickName:
        type: string
      status:
        type: string
      titleId:
        type: string
      token:
        type: string
      userName:
        type: string
    type: object
host: https://jellyfish-app-gz2qc.ondigitalocean.app
info:
  contact:
    email: alao.adebusy@gmail.com
    name: Alao Adebisi
  description: This service is meant to manage Cart request.
  license:
    name: Cart Manager Concept
    url: https://github.com/MartinHeinz/go-project-blueprint/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Cart Backend service
  version: "1.0"
paths:
  /api/admin/CreateTitle:
    post:
      consumes:
      - '*/*'
      description: Create new Title.
      parameters:
      - description: Create new title
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/api.TitleObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create new Title.
      tags:
      - admin
  /api/admin/GetAllStatus:
    get:
      consumes:
      - '*/*'
      description: Get all Status.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblStatus'
            type: array
      summary: Get all Status.
      tags:
      - admin
  /api/admin/GetTitles:
    get:
      consumes:
      - '*/*'
      description: Get all Title.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TitleResp'
            type: array
      security:
      - BearerAuth: []
      summary: Get all Titles.
      tags:
      - admin
  /api/admin/GetToken/{clientname}:
    get:
      consumes:
      - '*/*'
      description: Get Token for client.
      parameters:
      - description: Registered client name
        in: path
        name: clientname
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.TokenResp'
      summary: Get Token for client.
      tags:
      - admin
  /api/admin/RegisterNewClient:
    post:
      consumes:
      - '*/*'
      description: Register New Client.
      parameters:
      - description: Create new client
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.ClientRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.ClientResp'
      summary: Register New Client.
      tags:
      - admin
  /api/cart/AddItemToCart:
    post:
      consumes:
      - '*/*'
      description: Add item to an existing cart.
      parameters:
      - description: Add item to cart
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.CartItemObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: Item added to cart successfully!!
          schema:
            type: string
        "400":
          description: Unable to add item to cart at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add item to an existing cart.
      tags:
      - cart
  /api/cart/CloseCart:
    put:
      consumes:
      - '*/*'
      description: Close Cart.
      parameters:
      - description: Close cart
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.CloseCartObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.ResponseMessage'
      security:
      - BearerAuth: []
      summary: Close  Cart.
      tags:
      - cart
  /api/cart/CreateCart:
    post:
      consumes:
      - '*/*'
      description: Create new cart user.
      parameters:
      - description: Create new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.CartObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.ResponseMessage'
      security:
      - BearerAuth: []
      summary: Create new  cart user.
      tags:
      - cart
  /api/cart/CreateCartMember:
    post:
      consumes:
      - '*/*'
      description: Create new Cart Member.
      parameters:
      - description: Create new cart member
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.CartUserObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.ResponseMessage'
      security:
      - BearerAuth: []
      summary: Create new  Cart Member.
      tags:
      - cart
  /api/cart/GetCartByUserEmail/{EmailAddress}:
    get:
      consumes:
      - '*/*'
      description: Get Cart By User Email.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User Email
        in: path
        name: Email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.TblCart'
      security:
      - BearerAuth: []
      summary: Get Cart By User Email.
      tags:
      - cart
  /api/cart/GetCartByUserId/{UserId}:
    get:
      consumes:
      - '*/*'
      description: Get Cart By User Id.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.TblCart'
      security:
      - BearerAuth: []
      summary: Get Cart By User Id.
      tags:
      - cart
  /api/cart/GetCartItemsByCartId/{CartId}:
    get:
      consumes:
      - '*/*'
      description: Get Cart By Cart Id.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      - description: Cart ID
        in: path
        name: CartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblCartItem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Cart By Cart Id.
      tags:
      - cart
  /api/cart/GetCartItemsByUserId/{UserId}:
    get:
      consumes:
      - '*/*'
      description: Get Cart By User Id.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      - description: User Id
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblCartItem'
            type: array
      security:
      - BearerAuth: []
      summary: Get Cart By User Id.
      tags:
      - cart
  /api/cart/GetCartsByUserId/{UserId}:
    get:
      consumes:
      - '*/*'
      description: Get Carts By User Id.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblCart'
            type: array
      security:
      - BearerAuth: []
      summary: Get Carts By User Id.
      tags:
      - cart
  /api/cart/RemoveItemFromCart:
    post:
      consumes:
      - '*/*'
      description: This action can only be performed by the cart master.
      parameters:
      - description: Remove item from cart
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.RemoveCartItemObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: Item removed from cart successfully!!
          schema:
            type: string
        "400":
          description: Unable to remove item to cart at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove item  from existing cart.
      tags:
      - cart
  /api/cart/RemoveUserFromCart:
    post:
      consumes:
      - '*/*'
      description: Remove user from cart.
      parameters:
      - description: Remove member from cart
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.RemoveUserFromCartObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.ResponseMessage'
      security:
      - BearerAuth: []
      summary: Remove user from cart.
      tags:
      - cart
  /api/group/AddUserToCartGroup:
    post:
      consumes:
      - '*/*'
      description: This action can only be performed by the group admin.
      parameters:
      - description: Add user to Group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.TblTeamGroupObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: Create group was successfully!!
          schema:
            type: string
        "400":
          description: Unable to Create Group at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add user group from existing cart.
      tags:
      - group
  /api/group/CreateGroup:
    post:
      consumes:
      - '*/*'
      description: This action can only be performed by the admin.
      parameters:
      - description: Create Group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.TblGroupObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: Create group was successfully!!
          schema:
            type: string
        "400":
          description: Unable to Create Group at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: create group from existing cart.
      tags:
      - group
  /api/group/GetGroupByUserID/{UserId}:
    get:
      consumes:
      - '*/*'
      description: Get group by UserId.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      - description: User Id
        in: path
        name: UserId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblGroupUser'
            type: array
      security:
      - BearerAuth: []
      summary: Get group by UserId.
      tags:
      - group
  /api/group/GetGroupMemberByCartID/{CartId}:
    get:
      consumes:
      - '*/*'
      description: Get group member by carID.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      - description: Cart Id
        in: path
        name: CartId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dataaccess.TblGroupUser'
            type: array
      security:
      - BearerAuth: []
      summary: Get group member by carID.
      tags:
      - group
  /api/group/RemoveUserFromCartGroup:
    post:
      consumes:
      - '*/*'
      description: This action can only be performed by the group admin.
      parameters:
      - description: Remove user from Group
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dataaccess.RmoveUserFromGroupObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: User remove successfully!!
          schema:
            type: string
        "400":
          description: Unable to remove user from group at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove user group from existing cart.
      tags:
      - group
  /api/user/CompleteSignUp:
    post:
      consumes:
      - '*/*'
      description: CompleteSignUp user signup.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      - description: CompleteSignUp user signup
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.CompleteSignUp'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.ResponseMessage'
      security:
      - BearerAuth: []
      summary: CompleteSignUp user signup.
      tags:
      - user
  /api/user/CreateNewUser:
    post:
      consumes:
      - '*/*'
      description: Create new user cart user.
      parameters:
      - description: Create new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.UserObj'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.User'
      summary: Create new user cart user.
      tags:
      - user
  /api/user/GetUserByEmailAddress/{EmailAddress}:
    get:
      consumes:
      - '*/*'
      description: Get user by email address new cart user.
      parameters:
      - description: User email address
        in: path
        name: EmailAddress
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.UserResponse'
      security:
      - BearerAuth: []
      summary: Get user by email address new cart user.
      tags:
      - user
  /api/user/GetUserByMobile/{MobileNumber}:
    get:
      consumes:
      - '*/*'
      description: existing user destails by mobile number.
      parameters:
      - description: User mobile number
        in: path
        name: MobileNumber
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.CartObj'
      security:
      - BearerAuth: []
      summary: existing user destails by mobile number.
      tags:
      - user
  /api/user/LogIn/{UserName}/{Password}:
    get:
      consumes:
      - '*/*'
      description: Log user In with username and password.
      parameters:
      - description: Username
        in: path
        name: UserName
        required: true
        type: string
      - description: Password
        in: path
        name: Password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.UserResponse'
      summary: Log user In with username and password.
      tags:
      - user
  /api/user/LogInWithEmailAddress/{EmailAddress}/{Password}:
    get:
      consumes:
      - '*/*'
      description: Log user In with email address and password.
      parameters:
      - description: EmailAddress
        in: path
        name: EmailAddress
        required: true
        type: string
      - description: Password
        in: path
        name: Password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.UserResponse'
      summary: Log user In with email address and password.
      tags:
      - user
  /api/user/LogInWithMobileNumber/{MobileNumber}/{Password}:
    get:
      consumes:
      - '*/*'
      description: Log user In with mobile number and password.
      parameters:
      - description: MobileNumber
        in: path
        name: MobileNumber
        required: true
        type: string
      - description: Password
        in: path
        name: Password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/obj.UserResponse'
      summary: Log user In with mobile number and password.
      tags:
      - user
  /api/user/SendEmail:
    post:
      consumes:
      - '*/*'
      description: Send Email.
      parameters:
      - description: Send Email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.EmailObj'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: registered client name
        in: header
        name: clientName
        required: true
        type: string
      responses:
        "200":
          description: Email sent successfully!!
          schema:
            type: string
        "400":
          description: Unable to send email at the monent!!
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Send Email.
      tags:
      - user
  /api/user/SignUp:
    post:
      consumes:
      - '*/*'
      description: SignUp new user cart user.
      parameters:
      - description: SignUp new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/obj.SignUp'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dataaccess.User'
      summary: SignUp new user cart user.
      tags:
      - user
  /api/user/UploadImage:
    post:
      parameters:
      - description: Image File
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Import Image
  /testSvc:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
schemes:
- http
swagger: "2.0"
